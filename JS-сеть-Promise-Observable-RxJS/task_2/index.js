/*! For license information please see index.js.LICENSE.txt */
(()=>{"use strict";var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])})(n,r)};function n(n,r){if("function"!=typeof r&&null!==r)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");function e(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(e.prototype=r.prototype,new e)}function r(t,n){var r,e,o,i,u={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function c(i){return function(c){return function(i){if(r)throw new TypeError("Generator is already executing.");for(;u;)try{if(r=1,e&&(o=2&i[0]?e.return:i[0]?e.throw||((o=e.return)&&o.call(e),0):e.next)&&!(o=o.call(e,i[1])).done)return o;switch(e=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return u.label++,{value:i[1],done:!1};case 5:u.label++,e=i[1],i=[0];continue;case 7:i=u.ops.pop(),u.trys.pop();continue;default:if(!((o=(o=u.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){u=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){u.label=i[1];break}if(6===i[0]&&u.label<o[1]){u.label=o[1],o=i;break}if(o&&u.label<o[2]){u.label=o[2],u.ops.push(i);break}o[2]&&u.ops.pop(),u.trys.pop();continue}i=n.call(t,u)}catch(t){i=[6,t],e=0}finally{r=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,c])}}}function e(t){var n="function"==typeof Symbol&&Symbol.iterator,r=n&&t[n],e=0;if(r)return r.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&e>=t.length&&(t=void 0),{value:t&&t[e++],done:!t}}};throw new TypeError(n?"Object is not iterable.":"Symbol.iterator is not defined.")}function o(t,n){var r="function"==typeof Symbol&&t[Symbol.iterator];if(!r)return t;var e,o,i=r.call(t),u=[];try{for(;(void 0===n||n-- >0)&&!(e=i.next()).done;)u.push(e.value)}catch(t){o={error:t}}finally{try{e&&!e.done&&(r=i.return)&&r.call(i)}finally{if(o)throw o.error}}return u}function i(t,n){for(var r=0,e=n.length,o=t.length;r<e;r++,o++)t[o]=n[r];return t}function u(t){return this instanceof u?(this.v=t,this):new u(t)}function c(t,n,r){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var e,o=r.apply(t,n||[]),i=[];return e={},c("next"),c("throw"),c("return"),e[Symbol.asyncIterator]=function(){return this},e;function c(t){o[t]&&(e[t]=function(n){return new Promise((function(r,e){i.push([t,n,r,e])>1||a(t,n)}))})}function a(t,n){try{(r=o[t](n)).value instanceof u?Promise.resolve(r.value.v).then(s,l):f(i[0][2],r)}catch(t){f(i[0][3],t)}var r}function s(t){a("next",t)}function l(t){a("throw",t)}function f(t,n){t(n),i.shift(),i.length&&a(i[0][0],i[0][1])}}function a(t){return"function"==typeof t}Object.create,Object.create;var s,l=((s=function(t){var n;n=this,Error.call(n),n.stack=(new Error).stack,this.message=t?t.length+" errors occurred during unsubscription:\n"+t.map((function(t,n){return n+1+") "+t.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=t}).prototype=Object.create(Error.prototype),s.prototype.constructor=s,s);function f(t,n){if(t){var r=t.indexOf(n);0<=r&&t.splice(r,1)}}var p=function(){function t(t){this.initialTeardown=t,this.closed=!1,this._parentage=null,this._teardowns=null}return t.prototype.unsubscribe=function(){var t,n,r,u,c;if(!this.closed){this.closed=!0;var s=this._parentage;if(s)if(this._parentage=null,Array.isArray(s))try{for(var f=e(s),p=f.next();!p.done;p=f.next())p.value.remove(this)}catch(n){t={error:n}}finally{try{p&&!p.done&&(n=f.return)&&n.call(f)}finally{if(t)throw t.error}}else s.remove(this);var h=this.initialTeardown;if(a(h))try{h()}catch(t){c=t instanceof l?t.errors:[t]}var v=this._teardowns;if(v){this._teardowns=null;try{for(var y=e(v),b=y.next();!b.done;b=y.next()){var m=b.value;try{d(m)}catch(t){c=null!=c?c:[],t instanceof l?c=i(i([],o(c)),o(t.errors)):c.push(t)}}}catch(t){r={error:t}}finally{try{b&&!b.done&&(u=y.return)&&u.call(y)}finally{if(r)throw r.error}}}if(c)throw new l(c)}},t.prototype.add=function(n){var r;if(n&&n!==this)if(this.closed)d(n);else{if(n instanceof t){if(n.closed||n._hasParent(this))return;n._addParent(this)}(this._teardowns=null!==(r=this._teardowns)&&void 0!==r?r:[]).push(n)}},t.prototype._hasParent=function(t){var n=this._parentage;return n===t||Array.isArray(n)&&n.includes(t)},t.prototype._addParent=function(t){var n=this._parentage;this._parentage=Array.isArray(n)?(n.push(t),n):n?[n,t]:t},t.prototype._removeParent=function(t){var n=this._parentage;n===t?this._parentage=null:Array.isArray(n)&&f(n,t)},t.prototype.remove=function(n){var r=this._teardowns;r&&f(r,n),n instanceof t&&n._removeParent(this)},t.EMPTY=((n=new t).closed=!0,n),t;var n}();function h(t){return t instanceof p||t&&"closed"in t&&a(t.remove)&&a(t.add)&&a(t.unsubscribe)}function d(t){a(t)?t():t.unsubscribe()}p.EMPTY;var v=null,y=null,b=void 0,m=!1,w=!1,g={setTimeout:function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var r=g.delegate;return((null==r?void 0:r.setTimeout)||setTimeout).apply(void 0,i([],o(t)))},clearTimeout:function(t){var n=g.delegate;return((null==n?void 0:n.clearTimeout)||clearTimeout)(t)},delegate:void 0};function _(t){g.setTimeout((function(){if(!v)throw t;v(t)}))}function x(){}var S=E("C",void 0,void 0);function E(t,n,r){return{kind:t,value:n,error:r}}var T=null;function P(t){m&&T&&(T.errorThrown=!0,T.error=t)}var A=function(t){function r(n){var r=t.call(this)||this;return r.isStopped=!1,n?(r.destination=n,h(n)&&n.add(r)):r.destination=L,r}return n(r,t),r.create=function(t,n,r){return new O(t,n,r)},r.prototype.next=function(t){this.isStopped?I(function(t){return E("N",t,void 0)}(t),this):this._next(t)},r.prototype.error=function(t){this.isStopped?I(E("E",void 0,t),this):(this.isStopped=!0,this._error(t))},r.prototype.complete=function(){this.isStopped?I(S,this):(this.isStopped=!0,this._complete())},r.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,t.prototype.unsubscribe.call(this),this.destination=null)},r.prototype._next=function(t){this.destination.next(t)},r.prototype._error=function(t){try{this.destination.error(t)}finally{this.unsubscribe()}},r.prototype._complete=function(){try{this.destination.complete()}finally{this.unsubscribe()}},r}(p),O=function(t){function r(n,r,e){var o,i=t.call(this)||this;if(a(n))o=n;else if(n){var u;o=n.next,r=n.error,e=n.complete,i&&w?(u=Object.create(n)).unsubscribe=function(){return i.unsubscribe()}:u=n,o=null==o?void 0:o.bind(u),r=null==r?void 0:r.bind(u),e=null==e?void 0:e.bind(u)}return i.destination={next:o?j(o):x,error:j(null!=r?r:k),complete:e?j(e):x},i}return n(r,t),r}(A);function j(t,n){return function(){for(var n=[],r=0;r<arguments.length;r++)n[r]=arguments[r];try{t.apply(void 0,i([],o(n)))}catch(t){m?P(t):_(t)}}}function k(t){throw t}function I(t,n){var r=y;r&&g.setTimeout((function(){return r(t,n)}))}var L={closed:!0,next:x,error:k,complete:x},N="function"==typeof Symbol&&Symbol.observable||"@@observable";function B(t){return t}function C(t){return 0===t.length?B:1===t.length?t[0]:function(n){return t.reduce((function(t,n){return n(t)}),n)}}var M=function(){function t(t){t&&(this._subscribe=t)}return t.prototype.lift=function(n){var r=new t;return r.source=this,r.operator=n,r},t.prototype.subscribe=function(t,n,r){var e,o=this,i=(e=t)&&e instanceof A||function(t){return t&&a(t.next)&&a(t.error)&&a(t.complete)}(e)&&h(e)?t:new O(t,n,r);return function(t){if(m){var n=!T;if(n&&(T={errorThrown:!1,error:null}),t(),n){var r=T,e=r.errorThrown,o=r.error;if(T=null,e)throw o}}else t()}((function(){var t=o,n=t.operator,r=t.source;i.add(n?n.call(i,r):r?o._subscribe(i):o._trySubscribe(i))})),i},t.prototype._trySubscribe=function(t){try{return this._subscribe(t)}catch(n){t.error(n)}},t.prototype.forEach=function(t,n){var r=this;return new(n=Y(n))((function(n,e){var o;o=r.subscribe((function(n){try{t(n)}catch(t){e(t),null==o||o.unsubscribe()}}),e,n)}))},t.prototype._subscribe=function(t){var n;return null===(n=this.source)||void 0===n?void 0:n.subscribe(t)},t.prototype[N]=function(){return this},t.prototype.pipe=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return C(t)(this)},t.prototype.toPromise=function(t){var n=this;return new(t=Y(t))((function(t,r){var e;n.subscribe((function(t){return e=t}),(function(t){return r(t)}),(function(){return t(e)}))}))},t.create=function(n){return new t(n)},t}();function Y(t){var n;return null!==(n=null!=t?t:b)&&void 0!==n?n:Promise}function R(t){return function(n){if(function(t){return a(null==t?void 0:t.lift)}(n))return n.lift((function(n){try{return t(n,this)}catch(t){this.error(t)}}));throw new TypeError("Unable to lift unknown Observable type")}}var z=function(t){function r(n,r,e,o,i){var u=t.call(this,n)||this;return u.onFinalize=i,u._next=r?function(t){try{r(t)}catch(t){n.error(t)}}:t.prototype._next,u._error=o?function(t){try{o(t)}catch(t){n.error(t)}finally{this.unsubscribe()}}:t.prototype._error,u._complete=e?function(){try{e()}catch(t){n.error(t)}finally{this.unsubscribe()}}:t.prototype._complete,u}return n(r,t),r.prototype.unsubscribe=function(){var n,r=this.closed;t.prototype.unsubscribe.call(this),!r&&(null===(n=this.onFinalize)||void 0===n||n.call(this))},r}(A);function F(t,n){return R((function(r,e){var o=0;r.subscribe(new z(e,(function(r){e.next(t.call(n,r,o++))})))}))}var U=function(t){return t&&"number"==typeof t.length&&"function"!=typeof t},G="function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator";function q(t){if(t instanceof M)return t;if(null!=t){if(function(t){return a(t[N])}(t))return s=t,new M((function(t){var n=s[N]();if(a(n.subscribe))return n.subscribe(t);throw new TypeError("Provided object does not correctly implement Symbol.observable")}));if(U(t))return D(t);if(a(null==(i=t)?void 0:i.then))return o=t,new M((function(t){o.then((function(n){t.closed||(t.next(n),t.complete())}),(function(n){return t.error(n)})).then(null,_)}));if(function(t){return Symbol.asyncIterator&&a(null==t?void 0:t[Symbol.asyncIterator])}(t))return H(t);if(function(t){return a(null==t?void 0:t[G])}(t))return n=t,new M((function(t){var r,o;try{for(var i=e(n),u=i.next();!u.done;u=i.next()){var c=u.value;if(t.next(c),t.closed)return}}catch(t){r={error:t}}finally{try{u&&!u.done&&(o=i.return)&&o.call(i)}finally{if(r)throw r.error}}t.complete()}));if(function(t){return a(null==t?void 0:t.getReader)}(t))return H(function(t){return c(this,arguments,(function(){var n,e,o;return r(this,(function(r){switch(r.label){case 0:n=t.getReader(),r.label=1;case 1:r.trys.push([1,,9,10]),r.label=2;case 2:return[4,u(n.read())];case 3:return e=r.sent(),o=e.value,e.done?[4,u(void 0)]:[3,5];case 4:return[2,r.sent()];case 5:return[4,u(o)];case 6:return[4,r.sent()];case 7:return r.sent(),[3,2];case 8:return[3,10];case 9:return n.releaseLock(),[7];case 10:return[2]}}))}))}(t))}var n,o,i,s;throw function(t){return new TypeError("You provided "+(null!==t&&"object"==typeof t?"an invalid object":"'"+t+"'")+" where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.")}(t)}function D(t){return new M((function(n){for(var r=0;r<t.length&&!n.closed;r++)n.next(t[r]);n.complete()}))}function H(t){return new M((function(n){(function(t,n){var o,i,u,c,a,s,l,f;return a=this,s=void 0,f=function(){var a,s;return r(this,(function(r){switch(r.label){case 0:r.trys.push([0,5,6,11]),o=function(t){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var n,r=t[Symbol.asyncIterator];return r?r.call(t):(t=e(t),n={},o("next"),o("throw"),o("return"),n[Symbol.asyncIterator]=function(){return this},n);function o(r){n[r]=t[r]&&function(n){return new Promise((function(e,o){!function(t,n,r,e){Promise.resolve(e).then((function(n){t({value:n,done:r})}),n)}(e,o,(n=t[r](n)).done,n.value)}))}}}(t),r.label=1;case 1:return[4,o.next()];case 2:if((i=r.sent()).done)return[3,4];if(a=i.value,n.next(a),n.closed)return[2];r.label=3;case 3:return[3,1];case 4:return[3,11];case 5:return s=r.sent(),u={error:s},[3,11];case 6:return r.trys.push([6,,9,10]),i&&!i.done&&(c=o.return)?[4,c.call(o)]:[3,8];case 7:r.sent(),r.label=8;case 8:return[3,10];case 9:if(u)throw u.error;return[7];case 10:return[7];case 11:return n.complete(),[2]}}))},new((l=void 0)||(l=Promise))((function(t,n){function r(t){try{o(f.next(t))}catch(t){n(t)}}function e(t){try{o(f.throw(t))}catch(t){n(t)}}function o(n){var o;n.done?t(n.value):(o=n.value,o instanceof l?o:new l((function(t){t(o)}))).then(r,e)}o((f=f.apply(a,s||[])).next())}))})(t,n).catch((function(t){return n.error(t)}))}))}function J(t,n,r){return void 0===r&&(r=1/0),a(n)?J((function(r,e){return F((function(t,o){return n(r,t,e,o)}))(q(t(r,e)))}),r):("number"==typeof n&&(r=n),R((function(n,e){return function(t,n,r,e,o,i,u,c){var a=[],s=0,l=0,f=!1,p=function(){!f||a.length||s||n.complete()},h=function(t){return s<e?d(t):a.push(t)},d=function(t){s++;var o=!1;q(r(t,l++)).subscribe(new z(n,(function(t){n.next(t)}),(function(){o=!0}),void 0,(function(){if(o)try{s--;for(;a.length&&s<e;)t=void 0,t=a.shift(),d(t);p()}catch(t){n.error(t)}var t})))};return t.subscribe(new z(n,h,(function(){f=!0,p()}))),function(){}}(n,e,t,r)})))}var K=Array.isArray;function Q(t,n){return n?function(t,n){return new M((function(r){var e=0;return n.schedule((function(){e===t.length?r.complete():(r.next(t[e++]),r.closed||this.schedule())}))}))}(t,n):D(t)}var V=["addListener","removeListener"],W=["addEventListener","removeEventListener"],X=["on","off"];function Z(t,n,r,e){if(a(r)&&(e=r,r=void 0),e)return Z(t,n,r).pipe((u=e,F((function(t){return function(t,n){return K(n)?t.apply(void 0,i([],o(n))):t(n)}(u,t)}))));var u,c=o(function(t){return a(t.addEventListener)&&a(t.removeEventListener)}(t)?W.map((function(e){return function(o){return t[e](n,o,r)}})):function(t){return a(t.addListener)&&a(t.removeListener)}(t)?V.map($(t,n)):function(t){return a(t.on)&&a(t.off)}(t)?X.map($(t,n)):[],2),s=c[0],l=c[1];if(!s&&U(t))return J((function(t){return Z(t,n,r)}))(Q(t));if(!s)throw new TypeError("Invalid event target");return new M((function(t){var n=function(){for(var n=[],r=0;r<arguments.length;r++)n[r]=arguments[r];return t.next(1<n.length?n:n[0])};return s(n),function(){return l(n)}}))}function $(t,n){return function(r){return function(e){return t[r](n,e)}}}function tt(t){return void 0===t&&(t=1/0),J(B,t)}var nt=new M((function(t){return t.complete()}));function rt(t){return t[t.length-1]}function et(t){return(n=rt(t))&&a(n.schedule)?t.pop():void 0;var n}function ot(t,n){return"number"==typeof rt(t)?t.pop():n}console.log("Samples"),function(){document.body.append(document.createElement("button")),document.body.append(document.createElement("button")),document.body.append(document.createElement("button")),document.getElementsByTagName("button")[0].textContent="first button",document.getElementsByTagName("button")[1].textContent="second button",document.getElementsByTagName("button")[2].textContent="third button";var t=Z(document.getElementsByTagName("button")[0],"click"),n=Z(document.getElementsByTagName("button")[1],"click"),r=Z(document.getElementsByTagName("button")[2],"click");(function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var r=et(t),e=ot(t,1/0),o=t;return o.length?1===o.length?q(o[0]):tt(e)(Q(o,r)):nt})(t.pipe(),n.pipe(),r.pipe()).subscribe((function(){for(var t="#",n=0;n<3;n++)t+=Math.floor(99*Math.random()).toString();document.body.setAttribute("bgcolor",t)}))}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,